===========================================================================================================
	Search Engine ---- implement inverted index algorithm as asked by professor
				created by Yunlin Zeng	
===========================================================================================================
HOW TO INSTALL:

* Install JRE and eclipse.
* Import project in eclipse, click run.
* It takes nearly half minute to initialize. (grab content and construct trie tree)
* You can modify urls in source.txt file.
* URL.txt records all urls that generated by source.txt. 

***** SEE demo.mp4  as presentation *********************************


===========================================================================================================
IDEA:


Two Part:  Web crawler + Search Engine

1.We grab all URLs from source.txt file.
2. We use web crawler implemented by jsoup to grab 5 more urls between document for each url we grabbed from source.txt;
3. We categorize all urls into key-value pair, whose key is one mother url, and value are itself and its children url.

For example,

Key ---->Mother URL http://www.mkyong.com/   
Value ----> with 4 children URL and itself  
http://www.mkyong.com/  
http://www.mkyong.com/tutorials/spring-boot-tutorials/
http://www.mkyong.com/all-tutorials-on-mkyong-com/
http://www.mkyong.com/tutorials/android-tutorial/
http://www.mkyong.com/tutorials/java-8-tutorials/

4.We use jsoup to grab all html contents, and merge them together for each mother url.
Then stored them into a hashmap called map.
For example,
Key: mother URL ----> http://www.mkyong.com/   
value: merged html content of all its children url

5. We create a Trie tree within Search Engine using map as data source.
For each leaf node, we create an occurrenceList, it's a hashmap, record pageUrl and its occurrence frequency.

6.For each keyword user input, we find that word in Trie tree, get the occurrenceList.
Merge all occurrenceLists together and output.

7.We rank the output occurrenceLists in descending order by frequency.
This is our final result.

===========================================================================================================

